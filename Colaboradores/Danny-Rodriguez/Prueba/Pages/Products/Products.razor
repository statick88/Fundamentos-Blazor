@page "/product"
@inject ILogger<Products> logger;
@inject IProductService productService
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Lista de Productos</h3>

<PageTitle>Products</PageTitle>
<ModuleTitle Title="Products" />


@if (products != null)
{
    <ul>
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                </div>
            </div>
         }
    </ul>
}
else
{
    <p>No se encontraron productos.</p>
}

@code
{
    private List<Product> products;

    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetProducts();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}"))
            return;

        await productService.Delete(product.Id);

        toastService.ShowSuccess("Producto eliminado");

        products.Remove(product);
    }
}
